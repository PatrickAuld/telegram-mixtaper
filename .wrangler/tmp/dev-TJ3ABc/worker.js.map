{
  "version": 3,
  "sources": ["../../../src/spotify-token-manager.js", "../../../src/telegram-bot.js", "../../../src/spotify-api.js", "../../../src/worker.js", "../../../../../../.npm/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../.npm/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-X5N1ls/middleware-insertion-facade.js", "../../../../../../.npm/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-X5N1ls/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/patrick/code/patrickauld/telegram-mixtaper/.wrangler/tmp/dev-TJ3ABc",
  "sourcesContent": ["/**\n * Spotify Token Manager using Cloudflare KV Storage\n */\n\nexport class SpotifyTokenManager {\n  constructor(env) {\n    this.env = env;\n    this.kv = env.SPOTIFY_TOKENS;\n  }\n\n  /**\n   * Get a valid access token, refreshing if necessary\n   */\n  async getAccessToken() {\n    try {\n      // Try to get existing token from KV\n      const tokenData = await this.kv.get('spotify_oauth', 'json');\n      \n      if (tokenData && !this.isTokenExpired(tokenData)) {\n        console.log('Using existing valid token');\n        return tokenData.access_token;\n      }\n      \n      // Token is expired or doesn't exist, need to refresh\n      const refreshToken = tokenData?.refresh_token || this.env.SPOTIFY_REFRESH_TOKEN;\n      \n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      \n      console.log('Refreshing expired token');\n      return await this.refreshAccessToken(refreshToken);\n      \n    } catch (error) {\n      console.error('Error getting access token:', error);\n      \n      // Fallback to environment variable token (for initial setup)\n      if (this.env.SPOTIFY_ACCESS_TOKEN) {\n        console.log('Falling back to environment token');\n        return this.env.SPOTIFY_ACCESS_TOKEN;\n      }\n      \n      throw new Error(`Failed to get access token: ${error.message}`);\n    }\n  }\n\n  /**\n   * Refresh the access token using the refresh token\n   */\n  async refreshAccessToken(refreshToken) {\n    try {\n      const clientId = this.env.SPOTIFY_CLIENT_ID;\n      const clientSecret = this.env.SPOTIFY_CLIENT_SECRET;\n      \n      if (!clientId || !clientSecret) {\n        throw new Error('Spotify client credentials not configured');\n      }\n      \n      // Prepare Basic Auth header\n      const authHeader = btoa(`${clientId}:${clientSecret}`);\n      \n      const response = await fetch('https://accounts.spotify.com/api/token', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Basic ${authHeader}`,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token: refreshToken\n        })\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Token refresh failed: ${response.status} - ${errorText}`);\n      }\n      \n      const tokens = await response.json();\n      \n      // Calculate expiration time\n      const expiresAt = Date.now() + (tokens.expires_in * 1000);\n      \n      // Store new tokens in KV\n      const tokenData = {\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token || refreshToken, // Use new refresh token if provided\n        expires_at: expiresAt,\n        updated_at: new Date().toISOString()\n      };\n      \n      await this.kv.put('spotify_oauth', JSON.stringify(tokenData));\n      console.log('Stored refreshed token in KV');\n      \n      return tokens.access_token;\n      \n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if a token is expired (with 60 second buffer)\n   */\n  isTokenExpired(tokenData) {\n    if (!tokenData || !tokenData.expires_at) {\n      return true;\n    }\n    \n    const now = Date.now();\n    const expiresAt = tokenData.expires_at;\n    const bufferTime = 60 * 1000; // 60 seconds buffer\n    \n    return now >= (expiresAt - bufferTime);\n  }\n\n  /**\n   * Initialize tokens in KV from environment variables (for first-time setup)\n   */\n  async initializeFromEnvironment() {\n    try {\n      const accessToken = this.env.SPOTIFY_ACCESS_TOKEN;\n      const refreshToken = this.env.SPOTIFY_REFRESH_TOKEN;\n      \n      if (!accessToken || !refreshToken) {\n        throw new Error('Environment tokens not found');\n      }\n      \n      // Assume token expires in 1 hour if not specified\n      const expiresAt = Date.now() + (3600 * 1000);\n      \n      const tokenData = {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        expires_at: expiresAt,\n        updated_at: new Date().toISOString(),\n        source: 'environment'\n      };\n      \n      await this.kv.put('spotify_oauth', JSON.stringify(tokenData));\n      console.log('Initialized tokens from environment variables');\n      \n      return accessToken;\n      \n    } catch (error) {\n      console.error('Error initializing from environment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get current token info (for debugging)\n   */\n  async getTokenInfo() {\n    try {\n      const tokenData = await this.kv.get('spotify_oauth', 'json');\n      \n      if (!tokenData) {\n        return { status: 'no_token' };\n      }\n      \n      return {\n        status: this.isTokenExpired(tokenData) ? 'expired' : 'valid',\n        expires_at: new Date(tokenData.expires_at).toISOString(),\n        updated_at: tokenData.updated_at,\n        has_refresh_token: !!tokenData.refresh_token\n      };\n      \n    } catch (error) {\n      return { status: 'error', error: error.message };\n    }\n  }\n}", "/**\n * Telegram Bot API wrapper for Cloudflare Workers\n */\n\nexport class TelegramBot {\n  constructor(botToken) {\n    this.botToken = botToken;\n    this.baseURL = `https://api.telegram.org/bot${botToken}`;\n  }\n\n  /**\n   * Send a photo with caption (for track info with artwork)\n   */\n  async sendPhoto(chatId, photoUrl, caption, options = {}) {\n    try {\n      const payload = {\n        chat_id: chatId,\n        photo: photoUrl,\n        caption: caption,\n        parse_mode: 'HTML', // Using HTML for better formatting\n        ...options\n      };\n\n      const response = await fetch(`${this.baseURL}/sendPhoto`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Telegram API error: ${response.status} - ${errorText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error sending photo:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a text message\n   */\n  async sendMessage(chatId, text, options = {}) {\n    try {\n      const payload = {\n        chat_id: chatId,\n        text: text,\n        parse_mode: 'HTML',\n        ...options\n      };\n\n      const response = await fetch(`${this.baseURL}/sendMessage`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Telegram API error: ${response.status} - ${errorText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send track information as a reply to the original message\n   */\n  async sendTrackInfo(trackInfo, originalMessage) {\n    try {\n      const chatId = originalMessage.chat.id;\n      const messageId = originalMessage.message_id;\n\n      // Format track information\n      const artists = trackInfo.artists.join(', ');\n      const caption = `\uD83C\uDFB5 <b>${trackInfo.name}</b>\\n\uD83D\uDC64 ${artists}\\n\uD83D\uDCBF ${trackInfo.album}`;\n\n      if (trackInfo.artwork_url) {\n        // Send photo with track info as caption\n        return await this.sendPhoto(chatId, trackInfo.artwork_url, caption, {\n          reply_to_message_id: messageId\n        });\n      } else {\n        // Send text message if no artwork available\n        return await this.sendMessage(chatId, caption, {\n          reply_to_message_id: messageId\n        });\n      }\n\n    } catch (error) {\n      console.error('Error sending track info:', error);\n      \n      // Fallback: try to send just text without photo\n      try {\n        const artists = trackInfo.artists.join(', ');\n        const fallbackText = `\uD83C\uDFB5 ${trackInfo.name} - ${artists}`;\n        \n        return await this.sendMessage(originalMessage.chat.id, fallbackText, {\n          reply_to_message_id: originalMessage.message_id\n        });\n      } catch (fallbackError) {\n        console.error('Fallback message also failed:', fallbackError);\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Set webhook URL\n   */\n  async setWebhook(webhookUrl, options = {}) {\n    try {\n      const payload = {\n        url: webhookUrl,\n        ...options\n      };\n\n      const response = await fetch(`${this.baseURL}/setWebhook`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to set webhook: ${response.status} - ${errorText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error setting webhook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get webhook info\n   */\n  async getWebhookInfo() {\n    try {\n      const response = await fetch(`${this.baseURL}/getWebhookInfo`);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to get webhook info: ${response.status} - ${errorText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error getting webhook info:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete webhook\n   */\n  async deleteWebhook() {\n    try {\n      const response = await fetch(`${this.baseURL}/deleteWebhook`, {\n        method: 'POST'\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to delete webhook: ${response.status} - ${errorText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error deleting webhook:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get bot information\n   */\n  async getMe() {\n    try {\n      const response = await fetch(`${this.baseURL}/getMe`);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to get bot info: ${response.status} - ${errorText}`);\n      }\n\n      return await response.json();\n\n    } catch (error) {\n      console.error('Error getting bot info:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send formatted error message to error channel\n   */\n  async sendErrorNotification(env, error, context = '') {\n    try {\n      if (!env.TELEGRAM_ERROR_CHANNEL) {\n        console.log('No error channel configured, skipping error notification');\n        return;\n      }\n\n      const errorMessage = `\uD83D\uDEA8 <b>Bot Error</b>\\n\\n` +\n        `<b>Context:</b> ${context}\\n` +\n        `<b>Error:</b> ${error.message}\\n` +\n        `<b>Time:</b> ${new Date().toISOString()}`;\n\n      return await this.sendMessage(env.TELEGRAM_ERROR_CHANNEL, errorMessage);\n\n    } catch (notificationError) {\n      console.error('Failed to send error notification:', notificationError);\n    }\n  }\n\n  /**\n   * Send multiple track info messages for multiple Spotify links\n   */\n  async sendMultipleTrackInfo(trackInfoList, originalMessage) {\n    const results = [];\n    \n    for (const trackInfo of trackInfoList) {\n      try {\n        const result = await this.sendTrackInfo(trackInfo, originalMessage);\n        results.push({ success: true, result });\n        \n        // Small delay between messages to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n      } catch (error) {\n        console.error(`Failed to send track info for ${trackInfo.name}:`, error);\n        results.push({ success: false, error: error.message, trackInfo });\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Validate that the message came from Telegram (optional security check)\n   */\n  validateMessage(message, secretToken = null) {\n    // Basic validation - check required fields\n    if (!message || typeof message !== 'object') {\n      return false;\n    }\n\n    if (!message.message_id || !message.chat) {\n      return false;\n    }\n\n    // If secret token is provided, validate it\n    // Note: This would require additional header validation in the worker\n    if (secretToken) {\n      // Implementation would depend on Telegram's secret token validation\n      // For now, we'll skip this advanced validation\n    }\n\n    return true;\n  }\n}", "/**\n * Spotify Web API wrapper for Cloudflare Workers\n */\n\nexport class SpotifyAPI {\n  constructor(tokenManager) {\n    this.tokenManager = tokenManager;\n    this.baseURL = 'https://api.spotify.com/v1';\n  }\n\n  /**\n   * Get track information from Spotify\n   */\n  async getTrackInfo(trackId, accessToken) {\n    try {\n      const response = await fetch(`${this.baseURL}/tracks/${trackId}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Spotify API error: ${response.status} - ${response.statusText}`);\n      }\n\n      const track = await response.json();\n      \n      // Extract relevant information\n      return {\n        id: track.id,\n        name: track.name,\n        artists: track.artists.map(artist => artist.name),\n        album: track.album.name,\n        artwork_url: track.album.images && track.album.images.length > 0 \n          ? track.album.images[0].url \n          : null,\n        external_urls: track.external_urls,\n        preview_url: track.preview_url,\n        duration_ms: track.duration_ms\n      };\n\n    } catch (error) {\n      console.error(`Error getting track info for ${trackId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Add tracks to a Spotify playlist\n   */\n  async addTracksToPlaylist(trackUris, accessToken, env) {\n    try {\n      const playlistId = env.SPOTIFY_PLAYLIST_ID;\n      \n      if (!playlistId) {\n        throw new Error('SPOTIFY_PLAYLIST_ID not configured');\n      }\n\n      // Add tracks to the beginning of the playlist\n      const response = await fetch(`${this.baseURL}/playlists/${playlistId}/tracks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uris: trackUris,\n          position: 0  // Add to beginning of playlist\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Failed to add tracks to playlist: ${response.status} - ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log(`Successfully added ${trackUris.length} tracks to playlist`);\n      \n      return result;\n\n    } catch (error) {\n      console.error('Error adding tracks to playlist:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get playlist information\n   */\n  async getPlaylistInfo(playlistId, accessToken) {\n    try {\n      const response = await fetch(`${this.baseURL}/playlists/${playlistId}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get playlist info: ${response.status}`);\n      }\n\n      const playlist = await response.json();\n      \n      return {\n        id: playlist.id,\n        name: playlist.name,\n        description: playlist.description,\n        public: playlist.public,\n        collaborative: playlist.collaborative,\n        tracks: {\n          total: playlist.tracks.total\n        },\n        external_urls: playlist.external_urls,\n        images: playlist.images\n      };\n\n    } catch (error) {\n      console.error('Error getting playlist info:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if tracks already exist in playlist (to avoid duplicates)\n   */\n  async checkTracksInPlaylist(trackIds, accessToken, env) {\n    try {\n      const playlistId = env.SPOTIFY_PLAYLIST_ID;\n      \n      if (!playlistId) {\n        throw new Error('SPOTIFY_PLAYLIST_ID not configured');\n      }\n\n      // Get playlist tracks (first 50 items)\n      const response = await fetch(`${this.baseURL}/playlists/${playlistId}/tracks?limit=50&fields=items(track(id))`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        console.warn(`Failed to check playlist tracks: ${response.status}`);\n        return {}; // Return empty object if check fails, proceed with adding\n      }\n\n      const data = await response.json();\n      const existingTrackIds = new Set(\n        data.items\n          .filter(item => item.track && item.track.id)\n          .map(item => item.track.id)\n      );\n\n      // Return object indicating which tracks already exist\n      const duplicates = {};\n      trackIds.forEach(trackId => {\n        duplicates[trackId] = existingTrackIds.has(trackId);\n      });\n\n      return duplicates;\n\n    } catch (error) {\n      console.error('Error checking tracks in playlist:', error);\n      return {}; // Return empty object on error, proceed with adding\n    }\n  }\n\n  /**\n   * Get user's Spotify profile (for verification)\n   */\n  async getUserProfile(accessToken) {\n    try {\n      const response = await fetch(`${this.baseURL}/me`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to get user profile: ${response.status}`);\n      }\n\n      const user = await response.json();\n      \n      return {\n        id: user.id,\n        display_name: user.display_name,\n        email: user.email,\n        country: user.country,\n        followers: user.followers?.total || 0,\n        images: user.images\n      };\n\n    } catch (error) {\n      console.error('Error getting user profile:', error);\n      return null;\n    }\n  }\n}", "/**\n * Telegram Mixtaper - Cloudflare Workers Implementation\n * Monitors Telegram channels for Spotify links and adds them to playlists\n */\n\nimport { SpotifyTokenManager } from './spotify-token-manager.js';\nimport { TelegramBot } from './telegram-bot.js';\nimport { SpotifyAPI } from './spotify-api.js';\n\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      const url = new URL(request.url);\n      \n      // Health check endpoint\n      if (request.method === 'GET' && url.pathname === '/') {\n        return new Response(JSON.stringify({\n          status: 'ok',\n          message: 'Telegram Mixtaper Bot is running',\n          timestamp: new Date().toISOString()\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n      \n      // Telegram webhook endpoint\n      if (request.method === 'POST' && url.pathname === '/webhook') {\n        return await handleTelegramWebhook(request, env, ctx);\n      }\n      \n      // 404 for all other routes\n      return new Response('Not Found', { status: 404 });\n      \n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response(JSON.stringify({\n        error: 'Internal Server Error',\n        message: error.message\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n  },\n};\n\n/**\n * Handle incoming Telegram webhook\n */\nasync function handleTelegramWebhook(request, env, ctx) {\n  try {\n    const update = await request.json();\n    console.log('Received Telegram update:', JSON.stringify(update));\n    \n    // Only process messages with text\n    if (!update.message || !update.message.text) {\n      return new Response('OK', { status: 200 });\n    }\n    \n    const message = update.message;\n    const spotifyLinks = extractSpotifyLinks(message.text);\n    \n    if (spotifyLinks.length === 0) {\n      return new Response('OK', { status: 200 });\n    }\n    \n    console.log(`Found ${spotifyLinks.length} Spotify links:`, spotifyLinks);\n    \n    // Process Spotify links\n    ctx.waitUntil(processSpotifyLinks(spotifyLinks, message, env));\n    \n    return new Response('OK', { status: 200 });\n    \n  } catch (error) {\n    console.error('Webhook error:', error);\n    return new Response('Error', { status: 500 });\n  }\n}\n\n/**\n * Extract Spotify track URLs from text\n */\nfunction extractSpotifyLinks(text) {\n  const spotifyLinkRegex = /https?:\\/\\/open\\.spotify\\.com\\/track\\/([a-zA-Z0-9]+)(\\?[^\\s]*)?/g;\n  const links = [];\n  let match;\n  \n  while ((match = spotifyLinkRegex.exec(text)) !== null) {\n    links.push({\n      url: match[0],\n      trackId: match[1]\n    });\n  }\n  \n  return links;\n}\n\n/**\n * Process Spotify links - add to playlist and send track info\n */\nasync function processSpotifyLinks(spotifyLinks, message, env) {\n  try {\n    const tokenManager = new SpotifyTokenManager(env);\n    const spotifyAPI = new SpotifyAPI(tokenManager);\n    const telegramBot = new TelegramBot(env.TELEGRAM_BOT_TOKEN);\n    \n    // Get track URIs for playlist\n    const trackUris = spotifyLinks.map(link => `spotify:track:${link.trackId}`);\n    \n    // Add tracks to playlist\n    const accessToken = await tokenManager.getAccessToken();\n    await spotifyAPI.addTracksToPlaylist(trackUris, accessToken, env);\n    console.log(`Added ${trackUris.length} tracks to playlist`);\n    \n    // Send track info for each link\n    for (const link of spotifyLinks) {\n      try {\n        const trackInfo = await spotifyAPI.getTrackInfo(link.trackId, accessToken);\n        if (trackInfo) {\n          await telegramBot.sendTrackInfo(trackInfo, message);\n          console.log(`Sent track info for: ${trackInfo.name}`);\n        }\n      } catch (error) {\n        console.error(`Error processing track ${link.trackId}:`, error);\n      }\n    }\n    \n  } catch (error) {\n    console.error('Error processing Spotify links:', error);\n    \n    // Send error to Telegram if error channel is configured\n    if (env.TELEGRAM_ERROR_CHANNEL) {\n      try {\n        const telegramBot = new TelegramBot(env.TELEGRAM_BOT_TOKEN);\n        await telegramBot.sendMessage(env.TELEGRAM_ERROR_CHANNEL, `Error processing Spotify links: ${error.message}`);\n      } catch (telegramError) {\n        console.error('Failed to send error to Telegram:', telegramError);\n      }\n    }\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/patrick/code/patrickauld/telegram-mixtaper/src/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/patrick/.npm/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/patrick/.npm/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/patrick/code/patrickauld/telegram-mixtaper/src/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/patrick/code/patrickauld/telegram-mixtaper/.wrangler/tmp/bundle-X5N1ls/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/patrick/.npm/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/patrick/code/patrickauld/telegram-mixtaper/.wrangler/tmp/bundle-X5N1ls/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/patrick/code/patrickauld/telegram-mixtaper/.wrangler/tmp/bundle-X5N1ls/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
